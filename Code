using System;
using static System.Console;
using System.Linq;
namespace SLA
{
    class Program
    {
   	 static void Main(string[] args)
   	 {
   		 int playerHealth = 10, cpuHealth = 10; // Health
   		 int[] playerArray = { 1, 2, 3 }; // P1 Weapons
   		 int[] cpuArray = { 1, 2, 3 }; // CPU Weapons
   		 Messages("<===|=o  SWORDS, LANCES & AXES  o=|===>");
   		 Messages("You are King of the castle. For years, your fair rule has brought peace and prosperity to the kingdom.");
   		 Messages("At least, that is what your advisors have been saying. All dissenters were forcefully exiled. Now your paradise is absent of argument.");
   		 Messages("The clock strikes midnight. You are jolted from your luxurious slumber to a loud, frantic knocking at your door.");
   		 Messages("My liege! A messenger cries");
   		 Messages("The castle is under attack!!");
   		 Messages("You unlock the door and open it. The Messenger is struck down before you by assassins. Fortunately, three royal guards come to your aid.");
   		 Messages("What weapons are they carrying?");
   		 WriteLine("You may enter 1(Sword), 2(Lance), 3(Axe), or 0(Surrender)");
   		 do
   		 {
   			 int[] healthArray = new int[2]; // Get the valid values for the weapon and save in an array
   			 string errorDisplayMessage = "System: That is not a valid selection. You must choose 1(Sword), or 2(Lance), or 3(Axe), or 0(Surrender)";
   			 playerArray[0] = GetInput("What weapon is the first soldier carrying?", errorDisplayMessage);
   			 playerArray[1] = GetInput("What weapon is the second soldier carrying?", errorDisplayMessage);
   			 playerArray[2] = GetInput("What weapon is the third soldier carrying?", errorDisplayMessage);

   			 Random ranGen = new Random(); // Random number generator array
   			 cpuArray[0] = ranGen.Next(1, 3 + 1);
   			 cpuArray[1] = ranGen.Next(1, 3 + 1);
   			 cpuArray[2] = ranGen.Next(1, 3 + 1);

   			 if (playerArray.Length == 3 && cpuArray.Length == 3) //check invalid input, then play the game
   			 {
   				 if (playerArray[0] == 0 || playerArray[1] == 0 || playerArray[2] == 0) // Player forfeits the game
   				 {
   					 Messages("Stop! Please, I will come peacefully, you exclaim. Bring to me to your commander so we may discuss our terms.");
   					 playerHealth = 0;
   					 break;
   				 }
   				 healthArray = PlayGame(playerArray, cpuArray, cpuHealth, playerHealth);
   				 playerHealth = healthArray[0];
   				 cpuHealth = healthArray[1];
   			 }
   		 }
   		 while (playerHealth > 0 && cpuHealth > 0);
   		 Class1.DisplayResults(playerHealth, cpuHealth); // Displays battle outcome
   	 }
   	 public static void Messages(string msg) // Support for dialogue
   	 {
   		 WriteLine(msg);
   		 WriteLine("[Press enter to continue]");
   		 ReadKey();
   	 }
   	 static int[] PlayGame(int[] playerArray, int[] cpuHealthArray, int cpuHealth, int pHealth)
   	 {
   		 int[] healthArray = new int[2];
   		 for (int i = 0; i < playerArray.Length; i++) // Loop comparing P1 vs CPU battle arrays
   		 {
   			 if ((playerArray[i] == 1 && cpuHealthArray[i] == 3) || (playerArray[i] == 2 && cpuHealthArray[i] == 1) || (playerArray[i] == 3 && cpuHealthArray[i] == 2))
   			 {
   				 cpuHealth = cpuHealth - 5;
   				 WriteLine("The player's soldier " + i + " wins.");
   			 } //if the winner is the USER
   			 else if ((playerArray[i] == 1 && cpuHealthArray[i] == 2) || (playerArray[i] == 2 && cpuHealthArray[i] == 3) || (playerArray[i] == 3 && cpuHealthArray[i] == 1))
   			 {
   				 WriteLine("The computer's soldier " + i + " wins.");
   				 pHealth = pHealth - 5;
   			 } // if the winner is the COMPUTER
   			 else if ((playerArray[i] == 1 && cpuHealthArray[i] == 1) || (playerArray[i] == 2 && cpuHealthArray[i] == 2) || (playerArray[i] == 3 && cpuHealthArray[i] == 3))
   			 {
   				 WriteLine("The computer's soldier " + i + ", and the user's soldier " + i + " tie in combat.");
   			 } // if there is a DRAW
   		 }
   		 WriteLine("Current health of player: " + pHealth);
   		 WriteLine("Current health of computer: " + cpuHealth);

   		 if (pHealth > 0 && cpuHealth > 0)
   		 {
   			 WriteLine("Re-equip your soldiers:");
   		 }
   		 healthArray[0] = pHealth;
   		 healthArray[1] = cpuHealth;
   		 return healthArray; // Return the values of the health numbers in an array
   	 }
   	 static int GetInput(string messageToDisplay, string invalidInputMessage)
   	 {
   		 Console.WriteLine(messageToDisplay); // Display the passed message to the player
   		 int returnValue = -1;
   		 string inputValue = ReadLine();
   		 while (inputValue != "0" && inputValue != "1" && inputValue != "2" && inputValue != "3") // Ensure valid player input
   		 {
   			 Console.WriteLine(invalidInputMessage);
   			 inputValue = ReadLine();
   		 }
   		 returnValue = int.Parse(inputValue);
   		 return returnValue;
   	 }
    }
}
//CREATE NEW CLASS
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Console;

namespace SLA
{
    class Class1
    {
   	 public static void DisplayResults(int playerHealth, int cpuHealth)
   	 {
   		 if (playerHealth <= 0 && cpuHealth > 0) // CPU wins battle
   		 {
   			 Program.Messages("Your last defender slumps to the floor, slain. What was his name again? Before given time to consider, you too are struck down.");
   			 WriteLine("You are dead!");
   		 }
   		 else if (playerHealth > 0 && cpuHealth <= 0) // Player wins battle
   		 {
   			 Program.Messages("You win. You brought the enemy's health down to 0.");
   			 Program.Messages("You look down at the lifeless usurpers. Their faces are somehow familiar.");
   			 Program.Messages("You know these men. At least, you knew them. These are the corpses of exiles long cast out of your kingdom.");
   			 WriteLine("You survived this encounter, but begin wondering if things could have ended differently.");
   		 }
   		 else // Battle is a tie
   		 {
   			 Program.Messages("In your last battle, both your champion and your enemy have slain each other, resulting in a draw.");
   			 WriteLine("Staring at the corpse pile before you instills a vague sense of familiarity. You panic and run for help.");
   		 }
   	 }
    }
}
